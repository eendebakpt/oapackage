environment:

  global:
    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
    # /E:ON and /V:ON options are not enabled in the batch script intepreter
    # See: http://stackoverflow.com/a/13751649/163740
    WITH_COMPILER: "cmd /E:ON /V:ON /C .\\appveyor\\run_with_compiler.cmd"
    CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\appveyor\\run_with_env.cmd"
    CMD_IN_ENV_ARCH64: "cmd /E:ON /V:ON /C .\\appveyor\\run_with_env_arch64.cmd"
    CMD_IN_ENV36: "cmd /E:ON /V:ON /C .\\appveyor\\run_with_env36.cmd"
    CMD_IN_ENV35PLUS: "cmd /E:ON /V:ON /C .\\appveyor\\run_with_env35plus.cmd"

  matrix:
   
    - PYTHON: "C:\\Python36-x64"
      PYTHON_VERSION: "3.6.x"
      PYTHON_ARCH: "64"

    - PYTHON: "C:\\Python27-x64"
      PYTHON_VERSION: "2.7.x"
      PYTHON_ARCH: "64"
      WINDOWS_SDK_VERSION: "v7.0"
          
    - PYTHON: "C:\\Python34-x64"
      PYTHON_VERSION: "3.4.x"
      PYTHON_ARCH: "64"
      WINDOWS_SDK_VERSION: "v7.1"

    - PYTHON: "C:\\Python35-x64"
      PYTHON_VERSION: "3.5.x"
      PYTHON_ARCH: "64"

    - PYTHON: "C:\\Python37-x64"
      PYTHON_VERSION: "3.7.x"
      PYTHON_ARCH: "64"
    
    - PYTHON: "C:\\Python34"
      PYTHON_VERSION: "3.4.x"
      PYTHON_ARCH: "32"

    - PYTHON: "C:\\Python35"
      PYTHON_VERSION: "3.5.x"
      PYTHON_ARCH: "32"

    - PYTHON: "C:\\Python36"
      PYTHON_VERSION: "3.6.x"
      PYTHON_ARCH: "32"
      
    - PYTHON: "C:\\Python27"
      PYTHON_VERSION: "2.7.x"
      PYTHON_ARCH: "32"

    # For details see http://tjelvarolsson.com/blog/how-to-continuously-test-your-python-code-on-windows-using-appveyor/
        
matrix:
      fast_finish: true

init:
  - "ECHO %PYTHON% %PYTHON_VERSION% %PYTHON_ARCH%"

cache:
  - C:\tmp -> \appveyor\install_numpy.ps1
  
install:
  - ECHO "Filesystem root:"
  - ps: "ls \"C:/\""

  - ECHO "Installed SDKs:"
  - ps: "ls \"C:/Program Files/Microsoft SDKs/Windows\""

  # Install Python (from the official .msi of http://python.org) and pip when
  # not already installed.
  - ps: if (-not(Test-Path($env:PYTHON))) { & appveyor\install.ps1 }

  # install proxy, see https://www.appveyor.com/docs/how-to/http-proxy/
  - ps: iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-http-proxy.ps1'))
  
  # Prepend newly installed Python to the PATH of this build (this cannot be
  # done from inside the powershell script as it would require to restart
  # the parent CMD process).
  - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"

  # Check that we have the expected version and architecture for Python
  - "python --version"
  - "python -c \"import struct; print(struct.calcsize('P') * 8)\""
  
  # Upgrade to the latest version of pip to avoid it displaying warnings
  # about it being out of date.
  - "python -m pip install --disable-pip-version-check --user --upgrade pip"
  
  # Install the build dependencies of the project. If some dependencies contain
  # compiled extensions and are not provided as pre-built wheel packages,
  # pip will build them from source using the MSVC compiler matching the
  # target Python version and architecture
  - "%CMD_IN_ENV% pip install wheel==0.31"
  
  # Now that wheel has been installed, check to see if a numpy wheel has been
  # made yet. If it hasn't, compile it and put it in C:\tmp.
  - "powershell ./appveyor/install_numpy.ps1"
    
  # This is where I install numpy from the pre-built wheel I compiled either
  # earlier in this session, or in a previous session.
  - "%CMD_IN_ENV% pip install --no-index --find-links=c:\\tmp numpy"

  - ps: $env:ispython3 = $env:PYTHON.Contains("Python3")
  - ps: $env:ispython36 = $env:PYTHON.Contains("Python36")

  - ps: $env:ispython36 = $env:PYTHON.Contains("Python36")

  # part of the testing requirements
  - "%CMD_IN_ENV% pip install scanf"
  - "%CMD_IN_ENV% pip install pytest"

  # for running the jupyter notebooks
  - "%CMD_IN_ENV36% pip install jupyter"
  - "%CMD_IN_ENV36% pip install matplotlib"
  - "%CMD_IN_ENV36% jupyter --version"
  - "%CMD_IN_ENV36% jupyter kernelspec list"

  # lint the code
  - "%CMD_IN_ENV36% pip install pylint"
  # fix issues with incompatible package versions
  - "%CMD_IN_ENV35PLUS% pip install --upgrade prompt_toolkit"
  - "%CMD_IN_ENV35PLUS% %PYTHON%/python -c \"import prompt_toolkit; print(prompt_toolkit.__version__)\""

  - cinst -y swig

build: off

build_script:
  # Build the compiled extension
  - "%CMD_IN_ENV% python setup.py build"
  - "%CMD_IN_ENV% %PYTHON%/python setup.py test"


test_script:
   - "%CMD_IN_ENV_ARCH64% %PYTHON%/python -c \"import oapackage; print(oapackage)\""
   - "%CMD_IN_ENV_ARCH64% %PYTHON%/python setup.py install"
   - "%CMD_IN_ENV_ARCH64% %PYTHON%/python -c \"import oapackage; print(oapackage)\""

   - "%CMD_IN_ENV36% pytest" # .\\oapackage
   # only run nbconvert for python3.6
   - "%CMD_IN_ENV36% jupyter nbconvert --to notebook --execute  docs/examples/example_alan.ipynb "
   - "%CMD_IN_ENV36% jupyter nbconvert --to notebook --execute  docs/examples/example_oa_files.ipynb "
   - "%CMD_IN_ENV36% jupyter nbconvert --to notebook --execute  docs/examples/example_optimal_orthogonal_arrays.ipynb "
   - "%CMD_IN_ENV36% jupyter nbconvert --to notebook --execute  docs/examples/example_nauty.ipynb "
   - "%CMD_IN_ENV36% jupyter nbconvert --to notebook --execute  docs/examples/example_design_generation.ipynb "
   - "%CMD_IN_ENV36% jupyter nbconvert --to notebook --execute  docs/examples/example_oapackage.ipynb "
   - "%CMD_IN_ENV36% jupyter nbconvert --to notebook --execute  docs/examples/example_delete_one_factor_projections.ipynb "
   - "%CMD_IN_ENV36% jupyter nbconvert --to notebook --execute  docs/examples/example_generation_optimal_designs.ipynb "
   - "%CMD_IN_ENV36% jupyter nbconvert --to notebook --execute  docs/examples/conference_design_isomorphism.ipynb "
   - "%CMD_IN_ENV36% jupyter nbconvert --to notebook --execute  docs/examples/example_pareto.ipynb "
   - "%CMD_IN_ENV36% jupyter nbconvert --to notebook --execute  docs/examples/example_designs.ipynb "
   
   #- "%CMD_IN_ENV36% pylint oapackage --errors-only"
   
after_test:
  - "%CMD_IN_ENV% %PYTHON%/python setup.py bdist_wheel bdist_wininst"
  - ps: "ls dist"

artifacts:
  - path: dist\*
    name: binaries
  
#on_success:
#  - TODO: upload the content of dist/*.whl to a public wheelhouse

