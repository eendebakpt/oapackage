#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# oapackage documentation build configuration file, created by
# sphinx-quickstart on Tue Jun 26 20:08:57 2018.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
# import os
# import sys
# sys.path.insert(0, os.path.abspath('.'))


#%% The oapackage cannot be build on rtd. We mock the module
import os
import subprocess
import platform

rtd = os.environ.get('READTHEDOCS', False)
mock_oalib = False

if rtd:
    import sys
    from unittest.mock import MagicMock

    class Mock(MagicMock):

        @classmethod
        def __getattr__(cls, name):
            return MagicMock()

    if mock_oalib:
        MOCK_MODULES = ['_oalib']
        sys.modules.update((mod_name, Mock()) for mod_name in MOCK_MODULES)

    print('##############################')
    print('current directory: %s' % os.getcwd())
    print(sorted(os.listdir()))
    print('##############################')   
    sys.path.append('.')
    print('##############################')

if rtd:
    subprocess.call('cd ../; doxygen Doxyfile; python doxy2swig.py docs/xml/index.xml oadoxy.i', shell=True)
else:
    print('executing doxygen')
    if platform.system()=='Windows':
        r=subprocess.call('cd ../ && doxygen Doxyfile', shell=True)
    else:
        r=subprocess.call('cd ../; doxygen Doxyfile', shell=True)
    print('executing doxygen done')
    
#%%
# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = ['sphinx.ext.autodoc',
              #              'sphinx_rtd_theme',
              'sphinx.ext.mathjax']
extensions += ['sphinxcontrib.bibtex']
extensions += ['nbsphinx']
extensions += ['sphinxcontrib.napoleon']
extensions += ['sphinx.ext.intersphinx']
extensions += ['sphinx.ext.autosectionlabel']
extensions += ['IPython.sphinxext.ipython_console_highlighting']
extensions += ['sphinx.ext.autosummary']


extensions += ['breathe']
breathe_projects = { "oapackage": "./xml" }

breathe_default_project = "oapackage"

 
# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = 'oapackage'
copyright = '2018, Pieter Eendebak, Alan Vazquez'
author = 'Pieter Eendebak, Alan Vazquez'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#

#import oapackage
#version = '{}'.format(oapackage.__version__)
# The short X.Y version.
version = ''
# The full version, including alpha/beta/rc tags.
release = version

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path
exclude_patterns = ['setup.py', '_build', 'Thumbs.db', '.DS_Store', '../oapackage/tests.py', '../oapackage/markup.py', 'examples/.ipynb_checkpoints/*']

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = False


# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = 'alabaster'
html_theme = 'sphinx_rtd_theme'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']


# -- Options for HTMLHelp output ------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'oapackagedoc'


# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'oapackage.tex', 'oapackage Documentation',
     'Pieter Eendebak, Alan Vazquez', 'manual'),
]


# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'oapackage', 'oapackage Documentation',
     [author], 1)
]


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, 'oapackage', 'oapackage Documentation',
     author, 'oapackage', 'One line description of project.',
     'Miscellaneous'),
]

#%%


def run_apidoc(_):
    import os
    print('run_apidoc: current dir is %s' % os.getcwd())

    ignore_paths = [
        os.path.join('oapackage', 'markup.py'),
        'get_artifacts.py',
        'untitled*.py', 'doxy2swig.py', 'setup.py'
    ]
    ignore_paths = [os.path.join('..', file) for file in ignore_paths]
    

    argv = [
        "-f",
        #        "-T",
        #        "-e",
        "-M",
        "-o", ".",
        os.path.join("..")
        #os.path.join("..", 'oapackage')
    ] + ignore_paths

    sphinxcmd = 'sphinx-apidoc ' + ' '.join(argv)
    if rtd:
        print(sphinxcmd)

    
    if 1:
        try:
            # Sphinx 1.7+
            from sphinx.ext import apidoc
            apidoc.main(argv)
        except ImportError as ex:
            # Sphinx 1.6 (and earlier)
            from sphinx import apidoc
            argv.insert(0, apidoc.__file__)
            apidoc.main(argv)
    else:
        subprocess.call('dir' , shell=True)
        subprocess.call(sphinxcmd, shell=True)

def setup(app):
    print('conf.py: setup')
    app.connect('builder-inited', run_apidoc)
